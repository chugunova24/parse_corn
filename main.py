import telebot
from telebot import types
import datetime
# import os
from babel.dates import format_date, format_datetime
# import pprint
import time
from threading import Timer
import asyncio
import pymorphy2
from lemminflect import getInflection, getAllInflections
# from bs4 import BeautifulSoup
# import requests
# from urllib.request import urlopen
# from lxml import etree
import re
# from connect import GetParseResult

# # —Ä–∞–±–æ—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# option = Options()
# option.headless = False
#
# driver = webdriver.Chrome(options=option)

TOKEN = '2016761889:AAF0Baan6ouhKLwClb0O4utKv47wnclaZEA'
bot = telebot.TeleBot(TOKEN)

x = datetime.datetime.today()
x2 = datetime.datetime.date(x)
date_today = format_date(x2, locale='de_DE')


# InlineKeyboardMarkup - –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–∫—Å—Ç—É
# ReplyKeyboardMarkup - –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–¥ —á–∞—Ç–æ–º
# InlineKeyboardButton - –∫–Ω–æ–ø–∫–∞ –≤ —á–∞—Ç–µ
# KeyboardButton - –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
# (one_time_keyboard=True) - —É–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

# @bot.message_handler(commands=['start', 'help'])
# def send_welcome(message):
#     bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤–∏—á–æ–∫! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç. :)")
#     MainMenue(message)


@bot.message_handler(commands=['help'])
def infoBot(message):
    bot.send_message(message.chat.id,
                     "<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</i>.\n\n"
                     "<b>1) –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?</b>\n"
                     f"   - –î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≥—Ä–æ–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å ({date_today}).\n"
                     "     –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫'"
                     " –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                     "<b>2) –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ?</b>\n"
                     "   - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–æ–≤—É.\n"
                     "     –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'"
                     " –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                     "<b>3) –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∏–Ω–æ–Ω–∏–º?</b>\n"
                     "   - –°–∏–Ω–æ–Ω–∏–º—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É. –û–Ω–∏ —É–ª—É—á—à–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞, —Ç.–µ. –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º.\n"
                     "     –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º  –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º'"
                     " –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
                     "<b>4) –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å?</b>\n"
                     "- –ß—Ç–æ–±—ã –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /dict.\n"
                     "–ë–æ—Ç –≤—ã–≥—Ä—É–∑–∏—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —á–∞—Ç, –∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–∞—á–∞—Ç—å –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n"
                     "<b>5) –ê —á—Ç–æ –µ—Å–ª–∏ –º–Ω–µ –Ω–∞–¥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ—á–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ?</b>\n"
                     "- –ù–µ –ø—Ä–æ–±–ª–µ–º–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –ø–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ª–æ–≤–∞—Ä—å', –∞ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n\n\n"
                     "<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</i>\n\n"
                     "<b>–°–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–∏–Ω–æ–Ω–∏–º?</b>\n"
                     "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (–ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤), —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
                     "–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ: –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ + –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–∑–µ—Ä–Ω–æ, —è—á–º–µ–Ω—å, —Å–æ—è).\n"
                     "–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ: –º—É–∂—Å–∫–æ–π —Ä–æ–¥ + –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ + –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–∑–µ—Ä–Ω–æ–≤–æ–π, —è—á–º–µ–Ω–Ω—ã–π, —Å–æ–µ–≤—ã–π).\n"
                     "–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞: –ß—Ç–æ –¥–µ–ª–∞—Ç—å? (–¥—Ä–µ–º–∞—Ç—å).\n\n"
                     "<b>–•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä:</b>\n"
                     "–±–æ—Ç: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å.\n"
                     "–í—ã: –∑–µ—Ä–Ω–æ\n"
                     "–±–æ—Ç: –î–æ–±–∞–≤–∏—Ç—å –∫ —Å–ª–æ–≤—É –∑–µ—Ä–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã? –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: <strong>–∑–µ—Ä–Ω–æ –∑–µ—Ä–Ω–∞ –∑–µ—Ä–Ω—É –∑–µ—Ä–Ω–æ–º –∑–µ—Ä–Ω–µ –∑—ë—Ä–Ω–∞ –∑—ë—Ä–µ–Ω –∑—ë—Ä–Ω–∞–º –∑—ë—Ä–Ω–∞ –∑—ë—Ä–Ω–∞–º–∏ –∑—ë—Ä–Ω–∞—Ö</strong>. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.\n"
                     "<i>(#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å '–¥–∞', —Ç–æ –≤–º–µ—Å—Ç–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å '–Ω–µ—Ç', —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.)</i>"
                     "–í—ã: –¥–∞\n\n"
                     "<i>(#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '–∑–µ—Ä–Ω–æ' + —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ. –ö –∏–º–µ–Ω–∞–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∏–Ω–æ–Ω–∏–º—ã-—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ, –∫ –∏–º–µ–Ω–∞–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∏–Ω–æ–Ω–∏–º—ã-–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ, –∫ –≥–ª–∞–≥–æ–ª–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∏–Ω–æ–Ω–∏–º—ã-–≥–ª–∞–≥–æ–ª—ã)</i>\n"
                     "–±–æ—Ç: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º.\n"
                     "–í—ã: –∑–µ—Ä–Ω–æ\n"
                     "–±–æ—Ç: –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ—Å–∏–º.\n"
                     "–í—ã: –∑–µ—Ä–Ω–æ–≤–æ–π\n"
                     "–±–æ—Ç: –î–æ–±–∞–≤–∏—Ç—å –∫ —Å–∏–Ω–æ–Ω–∏–º—É –∑–µ—Ä–Ω–æ–≤–æ–π –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞? –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: <strong>–∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–º—É –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤–æ–º –∑–µ—Ä–Ω–æ–≤–∞—è –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤—É—é –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ—é –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–µ –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–º—É –∑–µ—Ä–Ω–æ–≤–æ–µ –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤–æ–º –∑–µ—Ä–Ω–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–º–∏ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤–µ–µ –∑–µ—Ä–Ω–æ–≤–µ–π –ø–æ–∑–µ—Ä–Ω–æ–≤–µ–µ –ø–æ–∑–µ—Ä–Ω–æ–≤–µ–π</strong>. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.\n"
                     "–í—ã: –¥–∞\n\n"
                     "<i>–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ—á–∫–∞ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–∑–µ—Ä–Ω–æ' –≤—ã–≥–ª—è–¥–∏—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –≤–æ—Ç —Ç–∞–∫: <strong>–∑–µ—Ä–Ω–æ –∑–µ—Ä–Ω–∞ –∑–µ—Ä–Ω—É –∑–µ—Ä–Ω–æ–º –∑–µ—Ä–Ω–µ –∑—ë—Ä–Ω–∞ –∑—ë—Ä–µ–Ω –∑—ë—Ä–Ω–∞–º –∑—ë—Ä–Ω–∞ –∑—ë—Ä–Ω–∞–º–∏ –∑—ë—Ä–Ω–∞—Ö –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–º—É –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤–æ–º –∑–µ—Ä–Ω–æ–≤–∞—è –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤—É—é –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ—é –∑–µ—Ä–Ω–æ–≤–æ–π –∑–µ—Ä–Ω–æ–≤–æ–µ –∑–µ—Ä–Ω–æ–≤–æ–≥–æ –∑–µ—Ä–Ω–æ–≤–æ–º—É –∑–µ—Ä–Ω–æ–≤–æ–µ –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤–æ–º –∑–µ—Ä–Ω–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤—ã–º –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–º–∏ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∑–µ—Ä–Ω–æ–≤–µ–µ –∑–µ—Ä–Ω–æ–≤–µ–π –ø–æ–∑–µ—Ä–Ω–æ–≤–µ–µ –ø–æ–∑–µ—Ä–Ω–æ–≤–µ–π</strong></i>\n"
                     ""
                     "", parse_mode="html")


# ================ –ú–ï–ù–Æ ===================
@bot.message_handler(commands=['start'])
def MainMenue(message):
    markup = types.InlineKeyboardMarkup()
    button5 = types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="FindByWord")
    button6 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º ‚úî", callback_data="AddSynonim")
    button7 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚úî", callback_data="AddKeyWordCALL")
    button8 = types.InlineKeyboardButton(text="–°–ª–æ–≤–∞—Ä—å üìÑ", callback_data="DictList")
    markup.add(button5).add(button6).add(button7).add(button8)
    bot.send_message(message.chat.id,
                     "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.",
                     reply_markup=markup)



# ---------------------- –û–ë–†–ê–ë–û–¢–ö–ê CALL.DATA --------------------------------------------

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "Menue":
               MainMenue(call.message)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Menue", reply_markup=None)

            if call.data == "FindByWord":
               bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                                                      "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
               bot.register_next_step_handler(call.message, FindNews)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–∏—Å–∫ üîé", reply_markup=None)

            if call.data == "AddSynonim":
               send = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º.\n"
                                                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
               bot.register_next_step_handler(send, AddSynonimTo)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º ‚úî", reply_markup=None)

            if call.data == "AddKeyWordCALL":
               send = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å.\n"
                                                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
               bot.register_next_step_handler(send, AddKeyWord)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚úî", reply_markup=None)

            if call.data == "DictList":
                markup = types.InlineKeyboardMarkup()
                bttn1 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚ùå", callback_data="delKeyW")
                bttn2 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º ‚ùå", callback_data="delSynW")
                bttn3 = types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ ‚ò∞", callback_data="FindString")
                # bttn4 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="AddKeyWordCALL")
                markup.add(bttn1).add(bttn2).add(bttn3)
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º.", reply_markup=markup)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–ª–æ–≤–∞—Ä—å üìÑ", reply_markup=None)

            if call.data == "delKeyW":
               send = bot.send_message(call.message.chat.id,
                                       "<strong>–í–Ω–∏–º–∞–Ω–∏–µ: –≤–º–µ—Å—Ç–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã.</strong>\n"
                                       "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å.\n"
                                       "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
               bot.register_next_step_handler(send, delKeyWord)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚ùå", reply_markup=None)

            if call.data == "delSynW":
               send = bot.send_message(call.message.chat.id,
                                       "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–∏–Ω–æ–Ω–∏–º –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å.\n"
                                       "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
               bot.register_next_step_handler(send, delSynWord)
               bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–¥–∞–ª–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º ‚ùå", reply_markup=None)

            if call.data == "FindString":
                send = bot.send_message(call.message.chat.id,
                                        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–ø–æ –Ω–µ–º—É –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å—Ç—Ä–æ—á–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ).\n"
                                        "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                        parse_mode="html")
                bot.register_next_step_handler(send, FindingString)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ ‚ò∞", reply_markup=None)

            # if call.data == "addAutoGen":
            #     send = bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ, —â–∞ —Å–¥–µ–ª–∞–µ–º")
            #     bot.register_next_step_handler(send, auto_generation_word)
            #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã?", reply_markup=None)
            # if call.data == "NotaddAutoGen":
            #     send = bot.send_message(call.message.chat.id, "–õ–∞–¥–Ω–æ, –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å")
            #     bot.register_next_step_handler(send, auto_generation_word)
            #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã?", reply_markup=None)
    except Exception as e:
        print(repr(e))
    # UnloadDict



# -------------------- –£–î–ê–õ–ï–ù–ò–ï –°–ò–ù–û–ù–ò–ú–ê –ò –ö–õ–Æ–ß–ï–í–û–ì–û –°–õ–û–í–ê ------------------------------

def delKeyWord(message):
    KeyWordText = message.text.lower()

    f = open('dict.txt', 'r', encoding='utf-8')
    f_lines = f.readlines()
    f.close()

    if KeyWordText == '—Å—Ç–æ–ø':
        return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
    check = 0
    HaveKey = False
    for line in f_lines:
        line = line.replace('\n', '')
        words = line.split(' ')
        for word in words:
            if words[0] == KeyWordText:
                line = line + '\n'
                indxLine = f_lines.index(line)
                # print(indxLine)
                HaveKey = True
                check+=1
                break
    # print(check)
    # print(HaveKey)
    if HaveKey == False:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        del f_lines[indxLine]
        f = open('dict.txt', 'w', encoding='utf-8')
        for line in f_lines:
            f.write(line)
        bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <strong>{KeyWordText}</strong> –∏ –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", parse_mode="html")
        f.close()

def delSynWord(message):
    # —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    def delSyn(message):
        SynText = message.text.lower()

        if SynText == '—Å—Ç–æ–ø':
            return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

        f = open('dict.txt', 'w', encoding='utf-8')
        HaveSyn = False
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–∞
        for line in f_lines:
            line1 = line.replace('\n', '')
            words = line1.split(' ')
            for word in words:
                if words[0] != word:
                    if word == SynText:
                        HaveSyn = True
                        break
        if HaveSyn == False:
            for line in f_lines:
                f.write(line)
            send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Å–∏–Ω–æ–Ω–∏–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                                                     f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏: <strong>{f_lines[indxLine]}</strong>.\n"
                                                     "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><u>'—Å—Ç–æ–ø'</u></strong>.", parse_mode="html")
            bot.register_next_step_handler(send, delSyn)
        # —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞ –ï–°–õ–ò –û–ù –ù–ï –ò–ù–î[0]
        if HaveSyn == True:
            ln = f_lines[indxLine].replace('\n', '')
            line_words = ln.split(' ')
            if line_words[0] != SynText:
                indx_SynText = line_words.index(SynText)
                # NewStr = f_lines[indxLine].replace(f'{SynText}', '')
                del line_words[indx_SynText]
                line_words[-1] += '\n'
                # print(line_words)
                NewStr = ' '.join(line_words)
                f_lines[indxLine] = NewStr
                for line in f_lines:
                    f.write(line)
        if HaveSyn == True:
            n_s = f_lines[indxLine].split(' ')
            keyWord = n_s[0]
            bot.send_message(message.chat.id, f"–°–∏–Ω–æ–Ω–∏–º <strong>{SynText}</strong> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ <strong>{keyWord}</strong>.",
                                              parse_mode="html")
        f.close()


    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    KeyText = message.text.lower()

    if KeyText == '—Å—Ç–æ–ø':
        return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

    f = open('dict.txt', 'r', encoding='utf-8')
    f_lines = f.readlines()
    f.close()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
    HaveKey = False
    for line in f_lines:
        words = line.split(' ')
        # print(words)
        if words[0] == KeyText:
            indxLine = f_lines.index(line)
            # print(indxLine)
            HaveKey = True
            break

    # print(check)
    # print(HaveKey)
    if HaveKey == False:
        send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><u>'—Å—Ç–æ–ø'</u></strong>.", parse_mode="html")
        bot.register_next_step_handler(send, delSynWord)
    # –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∏–Ω–æ–Ω–∏–º–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    else:
        send = bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ <strong>{KeyText}</strong>.\n"
                                                 f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏: <strong>{f_lines[indxLine]}</strong>\n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><u>'—Å—Ç–æ–ø'</u></strong>.", parse_mode="html")
        bot.register_next_step_handler(send, delSyn)






# -------------------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ò–ù–û–ù–ò–ú–ê –ò –ö–õ–Æ–ß–ï–í–û–ì–û –°–õ–û–í–ê ------------------------------

# def auto_generation_word(message):
#     textUser = message.text.lower()


# —Ä–∞–∑–±–æ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–¥–∞—á–∞ —Å–ª–æ–≤–∞
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
def AddKeyWord(message):
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    def AddWord():
        WordText = WordToGlobal.lower()
        # print(WordText)

        if WordText == '—Å—Ç–æ–ø':
            return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

        f = open('dict.txt', 'r', encoding='utf-8')
        f_lines = f.readlines()
        # print(f_lines)
        f.close()

        # f = open('dict.txt', 'a+', encoding='utf-8')
        # with open('dict.txt', 'a+', encoding='utf-8') as f:
        # –¥—É–±–ª—å —Å–ª–æ–≤–∞
        DoubleSyn = False
        for line in f_lines:
            line = line.replace('\n', '')
            words_in_line = line.split(' ')
            if words_in_line[0] == WordText:
                DoubleSyn = True
                send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                                                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                        parse_mode="html")
                bot.register_next_step_handler(send, AddKeyWord)
                break

        # print(DoubleSyn)
        if DoubleSyn == False:
            # markup = types.InlineKeyboardMarkup()
            # bttn1 = types.InlineKeyboardButton(text="–î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data="addAutoGen")
            # bttn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="NotaddAutoGen")
            # markup.add(bttn1).add(bttn2)
            # send = bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–∏—Ç—å –∫ —Å–ª–æ–≤—É <strong>{WordText}</strong> —Å–∏–Ω–æ–Ω–∏–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?")
            # bot.register_next_step_handler(send, auto_generation_word)
            def congrat():
                markup = types.InlineKeyboardMarkup()
                GoBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="Menue")
                Write = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="AddKeyWordCALL")
                markup.add(GoBack, Write)
                bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", reply_markup=markup)

            def answerAuto(message):
                textUser = message.text.lower()
                if textUser == '—Å—Ç–æ–ø':
                    return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                if textUser == '–¥–∞':
                    f = open('dict.txt', 'a+', encoding='utf-8')
                    wordK = f.write(nlp_result)
                    bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏: <strong>{nlp_result}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", parse_mode="html")
                    f.close()
                    congrat()
                elif textUser == '–Ω–µ—Ç':
                    f = open('dict.txt', 'a+', encoding='utf-8')
                    wordK = f.write(str(WordText) + "\n")  # —Å—Ç–∞—Ä–æ–µ
                    bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <strong>{WordText}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", parse_mode="html")
                    f.close()
                    congrat()
                else:
                    questionAuto()

            # wordK = str(WordText) + "\n" # —Å—Ç–∞—Ä–æ–µ
            # print(wordK)

            nlp_result = NLP_CASE(WordText)
            nlp_result = nlp_result.replace('\n', '')
            new_nlp = nlp_result.split(' ')
            for n in new_nlp:
                if n == WordText:
                    del new_nlp[new_nlp.index(n)]
            # new_nlp = set(new_nlp) # –ø–ª–æ—Ö–∞—è –∏–¥–µ—è
            # block = []
            # for x in new_nlp:
            #     block.append(x)
            # # print(block)
            new_nlp.insert(0, WordText)
            nlp_result = ' '.join(new_nlp) + '\n'
            # print(nlp_result)

            def questionAuto():
                send = bot.send_message(message.chat.id,
                                        f"–î–æ–±–∞–≤–∏—Ç—å –∫ —Å–ª–æ–≤—É <strong>{WordText}</strong> —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã?\n"
                                        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: <strong>{nlp_result}</strong>\n"
                                        f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É <strong>'–¥–∞'</strong> –∏–ª–∏ <strong>'–Ω–µ—Ç'</strong>.\n"
                                        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                        parse_mode="html")
                bot.register_next_step_handler(send, answerAuto)
            questionAuto()

            # wordK = f.write(NLP_CASE(WordText))
            # bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ {WordText} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    # global WordToGlobal
    # WordToGlobal = ""
    WordToGlobal = message.text.lower()

    if WordToGlobal.find(' ') != -1:
         send = bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ. –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ.\n"
                                                  "–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                                                  "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
         bot.register_next_step_handler(send, AddKeyWord)
    else:
        AddWord()



# # —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞-—Å–∏–Ω–æ–Ω–∏–º–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–¥–∞—á–∞ —Å–ª–æ–≤–∞
# # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
def AddSynonimTo(message):

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    def AddSynonimWord(message):

        # —á–µ–ª–æ–≤–µ–∫ –≤–≤–µ–ª –Ω–æ–≤—ã–π —Å–∏–Ω–æ–Ω–∏–º
        SynWordText = message.text.lower()

        if SynWordText.find(' ') != -1:
            send = bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n"
                                                     "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                                     parse_mode="html")
            return bot.register_next_step_handler(send, AddSynonimTo)

        # f = open('dict.txt', 'w', encoding='utf-8')

        # —Å—Ç–æ–ø-—Å–ª–æ–≤–æ
        if SynWordText == '—Å—Ç–æ–ø':
            for line in f_lines:
                f.write(line)
            return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

        # f = open('dict.txt', 'a+', encoding='utf-8')
        # f = open('dict.txt', 'w', encoding='utf-8')
        # HavWordToSyn = False
        # DoubleSyn = False

        DoubleSyn = False
        for line in f_lines:
            if line.find(SynWordText+' ') != -1:
                DoubleSyn = True
                bot.send_message(message.chat.id, f"–°–∏–Ω–æ–Ω–∏–º <strong>{SynWordText}</strong> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.", parse_mode="html")
                break
                # for line in f_lines:
                #     f.write(line)

        if DoubleSyn == False:
            # inStr = f_lines[indexLINE]
            # # print('index:', inStr)
            # NewStr = inStr.replace('\n', f' {NLP_CASE(SynWordText)}\n')
            # # print(NewStr)
            # f_lines[indexLINE] = NewStr
            # # print(f_lines)
            # for line in f_lines:
            #     f.write(line)
            # bot.send_message(message.chat.id, f"–°–∏–Ω–æ–Ω–∏–º {SynWordText} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")


            def answerAuto2(message):
                textUser = message.text.lower()
                if textUser == '—Å—Ç–æ–ø':
                    return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                if textUser == '–¥–∞':
                    f = open('dict.txt', 'w', encoding='utf-8')
                    indStr = f_lines[indexLINE]
                    NewStr = indStr.replace('\n', f' {NLP_CASE(SynWordText)}')
                    f_lines[indexLINE] = NewStr
                    for line in f_lines:
                        f.write(line)
                    f.close()
                    # wordK = f.write(NLP_CASE(SynWordText))
                    bot.send_message(message.chat.id, f"–°–∏–Ω–æ–Ω–∏–º—ã:\n<strong>{nlp_result}</strong>\n—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É <strong>{SynToGlobal}</strong>.", parse_mode="html")
                    congrat()
                elif textUser == '–Ω–µ—Ç':
                    f = open('dict.txt', 'w', encoding='utf-8')
                    indStr = f_lines[indexLINE]
                    NewStr = indStr.replace('\n', f' {SynWordText}\n')
                    f_lines[indexLINE] = NewStr
                    for line in f_lines:
                        f.write(line)
                    f.close()
                    bot.send_message(message.chat.id, f"–°–∏–Ω–æ–Ω–∏–º <strong>{SynWordText}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É <strong>{SynToGlobal}</strong>.", parse_mode="html")
                    congrat()
                else:
                    questionAuto2()

            def congrat():
                markup = types.InlineKeyboardMarkup()
                GoBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="Menue")
                Write = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="AddSynonim")
                markup.add(GoBack, Write)
                bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", reply_markup=markup)

            nlp_result = NLP_CASE(SynWordText)

            def questionAuto2():
                send = bot.send_message(message.chat.id,
                                        f"–î–æ–±–∞–≤–∏—Ç—å –∫ —Å–∏–Ω–æ–Ω–∏–º—É <strong>{SynWordText}</strong> –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞?\n"
                                        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: <strong>{nlp_result}</strong>\n"
                                        f"–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É <strong>'–¥–∞'</strong> –∏–ª–∏ <strong>'–Ω–µ—Ç'</strong>.\n"
                                        "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                        parse_mode="html")
                bot.register_next_step_handler(send, answerAuto2)

            questionAuto2()



            # wordK = str(WordText) + "\n" # —Å—Ç–∞—Ä–æ–µ
            # print(wordK)


        # f.close()
        #
        # markup = types.InlineKeyboardMarkup()
        # GoBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="Menue")
        # Write = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="AddSynonim")
        # markup.add(GoBack, Write)
        # bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", reply_markup=markup)

    SynToGlobal = message.text.lower()
    f = open('dict.txt', 'r', encoding='utf-8')
    f_lines = f.readlines()
    f.close()

    # —Å—Ç–æ–ø-—Å–ª–æ–≤–æ
    if SynToGlobal == '—Å—Ç–æ–ø':
        return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

    check = False
    if SynToGlobal.find(' ') != -1:
        send = bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
        check = True
        bot.register_next_step_handler(send, AddSynonimTo)

    # –ï—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
    indexLINE = int()
    DoubleSyn = False
    for line in f_lines:
        line = line.replace('\n', '')
        words_in_line = line.split(' ')
        if words_in_line[0] == SynToGlobal:
            line = line + '\n'
            indexLINE = f_lines.index(line)
            DoubleSyn = True
            send = bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ—Å–∏–º.\n"
                                                     "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
            bot.register_next_step_handler(send, AddSynonimWord)
            break

    # print(DoubleSyn)
    # print(check)
    if DoubleSyn == False and check == False:
        send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. \n"
                                                 "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º.\n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.", parse_mode="html")
        bot.register_next_step_handler(send, AddSynonimTo)


# --------- –í–´–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø -------------

@bot.message_handler(commands=['dict'])
def UnloadDict(message):
    doc = open('dict.txt', 'rb')
    bot.send_document(message.chat.id, doc)

# --------- NLP PYMORPHY2/lemminflect ----
def NLP_CASE(a):
    if re.search('[a-zA-Z]', a):
        all_infl = getAllInflections(a)
        spisok = []
        for key, value in all_infl.items():
            for val in value:
                spisok.append(val)
        spisok = list(set(spisok))
        words = ' '.join(spisok)
        return words
    else:
        morph = pymorphy2.MorphAnalyzer(lang='ru')
        butyavka = morph.parse('%s' % a)[0]
        butyavka_lex = butyavka.lexeme

        words_lex = []
        # words_lex.append(a)
        for i in butyavka_lex:
            words_lex.append(i.word)
        words = ' '.join(words_lex) + '\n'
        return words

# --------- –ü–û–ò–°–ö –°–¢–†–û–ö–ò –í –°–õ–û–í–ê–†–ï -------------
def FindingString(message):
    Fstring = message.text.lower()
    f = open('dict.txt', 'r', encoding='utf-8')
    f_lines = f.readlines()
    f.close()

    # —Å—Ç–æ–ø-—Å–ª–æ–≤–æ
    if Fstring == '—Å—Ç–æ–ø':
        return bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

    check = False
    if Fstring.find(' ') != -1:
        send = bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                                 parse_mode="html")
        check = True
        bot.register_next_step_handler(send, FindingString)

    # –ï—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
    indexLINE = int()
    DoubleSyn = False
    for line in f_lines:
        line = line.replace('\n', '')
        words_in_line = line.split(' ')
        if words_in_line[0] == Fstring:
            line = line + '\n'
            indexLINE = f_lines.index(line)
            DoubleSyn = True
            break

    # print(DoubleSyn)
    # print(check)
    if DoubleSyn is False and check is False:
        send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. \n"
                                                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <strong><i>'—Å—Ç–æ–ø'</i></strong>.",
                                                 parse_mode="html")
        bot.register_next_step_handler(send, FindingString)
    if DoubleSyn is True and check is False:
        bot.send_message(message.chat.id, f"{f_lines[indexLINE]}")


# -------------- BACKUP DICT -------------------

async def backup_dict():
    doc = open('dict.txt', 'rb')
    bot.send_message(1883531134, '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ')
    bot.send_document(1883531134, doc)
    doc.close()


def execute_backup_dict():
    print('--–±—ç–∫–∞–ø--')
    asyncio.run(backup_dict())
    t = Timer(600.0, execute_backup_dict)  #3600.0 10—á
    t.start()
execute_backup_dict()


# -------------- –°–õ–û–í–ê–†–¨ (–ü–û–ò–°–ö –ü–û –°–õ–û–í–ê–†–Æ) -----------------
def FindNews(mess):
    if mess.text.lower == '—Å—Ç–æ–ø':
        return bot.send_message(mess.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')  # –ü–û–°–¢–ê–í–ò–õ–ê –í–´–®–ï
    asyncio.run(asyncFindNews(mess))
# —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è, –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async def asyncFindNews(message):

    message_words = message.text.lower().split(' ')
    print('\n–º–µ—Å–µ–¥–∂ –ª–æ–≤–µ—Ä')

    f = open('dict.txt', 'r', encoding='utf-8')
    f_lines = f.readlines()

    a = GetParseResult()

    WordsLineWithSyn = []
    for Word in message_words:
        WordWasFind = False
        for line in f_lines:
            # print(line)
            line = line.replace('\n', '')
            if WordWasFind == False:
                if line.find(Word + " ") != -1:
                    WordsLineWithSyn.append(line)
                    print('—Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ', Word)
                    WordWasFind = True
        if WordWasFind == False:
            WordsLineWithSyn.append(Word)

    # print('\n—Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã')
    # –ø–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤ (–≤—ã—Ö–æ–¥ str)

    ParseResult = a
    TempParseResult = []

    # print("ParseResult")
    # print(ParseResult)
    for WordLine in WordsLineWithSyn:
        for word in WordLine.split(" "):
            for ParseNews in ParseResult:
                NewsNews = ParseNews
                ParseNews = ParseNews[:ParseNews.find("<a href=")]
                if ParseNews.lower().replace(':', ' ').replace('.', ' ').replace(',', ' ').replace('"', ' ') \
                        .replace('/', ' ').replace('\'', ' ').replace('—ë', '–µ').find(" " + word + " ") != -1:
                    TempParseResult.append(NewsNews)
        ParseResult = TempParseResult
        TempParseResult = []

    ParseResult = set(ParseResult)
    # print(ParseResult)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ+—Å–ª–æ–≤–∞—Ä–µ
    if ParseResult == set():
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        markup = types.InlineKeyboardMarkup()
        GoBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="Menue")
        Write = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="FindByWord")
        markup.add(GoBack, Write)
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", reply_markup=markup)
    else:
        for elem_r_set in ParseResult:
            # bot.send_message(message.chat.id, elem_r_set)
            bot.send_message(message.chat.id, elem_r_set, disable_web_page_preview=True, parse_mode='html')
        markup = types.InlineKeyboardMarkup()
        GoBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="Menue")
        Write = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="FindByWord")
        markup.add(GoBack, Write)
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å", reply_markup=markup)



# ----------------------- –ó–ê–ü–£–°–ö -------------------------

bot.infinity_polling()
